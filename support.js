import bot from "./bot.js";
import { findContentByID } from "./models/content.js";
import { findUserByChatId } from "./models/user.js";
import values from "./values.js";

const orderManager = () => {
    // –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
    const activeOrderSessions = new Map();

    // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
    bot.on("callback_query", async (query) => {
        const chatId = query.message.chat.id;
        const userId = query.from.id;
        const username = query.from.username || "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á";
        const data = query.data;

        if (data ==="order_product" || data === "custom_order") {
            
            const user = await findUserByChatId(chatId);
            const orderDetails = await findContentByID(user?.goods);
            const price = orderDetails?.price || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ";
            const category = orderDetails?.category_id || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ";
            const stockStatus = data ==="order_product" ? "–≥–æ—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä" : "—ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –¥–∏–∑–∞–π–Ω";

            // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —á–µ—Ä–≥—É –∑–∞–º–æ–≤–ª–µ–Ω—å
            activeOrderSessions.set(userId, values.admin_chatId);

            // –°–ø–æ–≤—ñ—â–∞—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            bot.sendMessage(
                values.admin_chatId,
                `üõç –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø!\nüë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @${username} (ID: ${userId})\nüì¶ –¢–æ–≤–∞—Ä: ${category}\nüí∞ –¶—ñ–Ω–∞: ${price} –≥—Ä–Ω\nüì¶ –°—Ç–∞—Ç—É—Å: ${stockStatus}\n\nüì© –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –Ω–∞ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. /end 429789892 –¥–ª—è –∑–∞–≤–µ—Ä—â–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É`,
            );

            // –°–ø–æ–≤—ñ—â–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            bot.sendMessage(chatId, "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.");
        }
    });

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–ª—ñ—î–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    bot.on("message", (msg) => {
        const userId = msg.chat.id;
        const text = msg.text;

        if (activeOrderSessions.has(userId)) {
            bot.sendMessage(
                values.admin_chatId,
                `üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @${msg.from.username || "–ù–µ–≤—ñ–¥–æ–º–∏–π"} (ID: ${userId}):\n${text}`,
                { reply_markup: { force_reply: true } }
            );
        }
    });

    // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    bot.on("message", (msg) => {
        const text = msg.text;

        if (msg.reply_to_message) {
            const match = msg.reply_to_message.text.match(/ID: (\d+)/);
            if (match) {
                const userId = Number(match[1]);
                bot.sendMessage(userId, `üì© –ú–µ–Ω–µ–¥–∂–µ—Ä: ${text}`);
            }
        }
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    bot.onText(/\/end (\d+)/, (msg, match) => {
        const userId = Number(match[1]);

        if (activeOrderSessions.has(userId)) {
            activeOrderSessions.delete(userId);
            bot.sendMessage(userId, "üîö –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üôå", {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "üÜï –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "startover" }]
                    ]
                }
            });
            
            bot.sendMessage(values.admin_chatId, `‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID: ${userId}) –∑–∞–≤–µ—Ä—à–µ–Ω–æ.`);
        } else {
            bot.sendMessage(values.admin_chatId, "‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ü–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    });
}

export default orderManager;
